<?php

namespace Modules\Sales\Tests\Feature;

use Tests\TestCase;
use Modules\Sales\Models\Customer;
use Modules\User\Models\User;
use Spatie\Permission\Models\Role;
use Spatie\Permission\Models\Permission;
use Illuminate\Foundation\Testing\RefreshDatabase;

class CustomerUpdateTest extends TestCase
{
    use RefreshDatabase;

    protected function setUp(): void
    {
        parent::setUp();
        
        // Crear permisos necesarios
        Permission::firstOrCreate(['name' => 'customers.update', 'guard_name' => 'api']);
        Permission::firstOrCreate(['name' => 'customers.view', 'guard_name' => 'api']);
        
        // Crear roles
        Role::firstOrCreate(['name' => 'admin', 'guard_name' => 'api']);
        Role::firstOrCreate(['name' => 'tech', 'guard_name' => 'api']);
        Role::firstOrCreate(['name' => 'customer', 'guard_name' => 'api']);
    }

    private function createUserWithPermissions(string $role, array $permissions = []): User
    {
        $user = User::factory()->create();
        $roleModel = Role::findByName($role, 'api');
        
        if (!empty($permissions)) {
            $roleModel->givePermissionTo($permissions);
        }
        
        $user->assignRole($role);
        return $user;
    }

    public function test_admin_can_update_customer()
    {
        $admin = $this->createUserWithPermissions('admin', ['customers.update']);
        
        $customer = Customer::factory()->create([
            'name' => 'Cliente Original',
            'email' => 'original@test.com',
            'classification' => 'minorista',
            'credit_limit' => 10000.00,
            'is_active' => true
        ]);

        $updateData = [
            'type' => 'customers',
            'id' => (string) $customer->id,
            'attributes' => [
                'name' => 'Cliente Actualizado S.A.',
                'email' => 'actualizado@test.com',
                'phone' => '+9876543210',
                'address' => 'Nueva Dirección 456',
                'city' => 'Nueva Ciudad',
                'state' => 'Nuevo Estado',
                'country' => 'Nuevo País',
                'classification' => 'mayorista',
                'credit_limit' => 75000.00,
                'current_credit' => 25000.00,
                'is_active' => false,
                'metadata' => [
                    'updated_by' => 'admin',
                    'reason' => 'Upgrade to wholesale'
                ]
            ]
        ];

        $response = $this->actingAs($admin, 'sanctum')
            ->jsonApi()
            ->expects('customers')
            ->withData($updateData)
            ->patch("/api/v1/customers/{$customer->id}");

        $response->assertStatus(200);
        
        // Verificar que los datos fueron actualizados en la base de datos
        $this->assertDatabaseHas('customers', [
            'id' => $customer->id,
            'name' => 'Cliente Actualizado S.A.',
            'email' => 'actualizado@test.com',
            'classification' => 'mayorista',
            'credit_limit' => 75000.00,
            'current_credit' => 25000.00,
            'is_active' => false
        ]);
        
        // Verificar valores específicos en la respuesta
        $this->assertEquals('Cliente Actualizado S.A.', $response->json('data.attributes.name'));
        $this->assertEquals('mayorista', $response->json('data.attributes.classification'));
        $this->assertEquals(75000.00, $response->json('data.attributes.credit_limit'));
        $this->assertFalse($response->json('data.attributes.is_active'));
    }

    public function test_admin_can_partially_update_customer()
    {
        $admin = $this->createUserWithPermissions('admin', ['customers.update']);
        
        $customer = Customer::factory()->create([
            'name' => 'Cliente Original',
            'email' => 'original@test.com',
            'classification' => 'minorista',
            'credit_limit' => 10000.00
        ]);

        $updateData = [
            'type' => 'customers',
            'id' => (string) $customer->id,
            'attributes' => [
                'credit_limit' => 20000.00,
                'phone' => '+1111111111'
            ]
        ];

        $response = $this->actingAs($admin, 'sanctum')
            ->jsonApi()
            ->expects('customers')
            ->withData($updateData)
            ->patch("/api/v1/customers/{$customer->id}");

        $response->assertStatus(200);
        
        // Verificar que solo los campos especificados fueron actualizados
        $this->assertDatabaseHas('customers', [
            'id' => $customer->id,
            'name' => 'Cliente Original', // No cambió
            'email' => 'original@test.com', // No cambió
            'classification' => 'minorista', // No cambió
            'credit_limit' => 20000.00, // Sí cambió
            'phone' => '+1111111111' // Sí cambió
        ]);
    }

    public function test_cannot_update_customer_with_duplicate_email()
    {
        $admin = $this->createUserWithPermissions('admin', ['customers.update']);
        
        // Crear dos customers
        $customer1 = Customer::factory()->create(['email' => 'existente@test.com']);
        $customer2 = Customer::factory()->create(['email' => 'original@test.com']);

        $updateData = [
            'type' => 'customers',
            'id' => (string) $customer2->id,
            'attributes' => [
                'email' => 'existente@test.com' // Email que ya existe
            ]
        ];

        $response = $this->actingAs($admin, 'sanctum')
            ->jsonApi()
            ->expects('customers')
            ->withData($updateData)
            ->patch("/api/v1/customers/{$customer2->id}");

        $response->assertStatus(422);
        $response->assertJsonValidationErrors(['email']);
    }

    public function test_can_update_customer_with_same_email()
    {
        $admin = $this->createUserWithPermissions('admin', ['customers.update']);
        
        $customer = Customer::factory()->create([
            'email' => 'mismo@test.com',
            'name' => 'Cliente Original'
        ]);

        $updateData = [
            'type' => 'customers',
            'id' => (string) $customer->id,
            'attributes' => [
                'email' => 'mismo@test.com', // Mismo email
                'name' => 'Cliente Actualizado'
            ]
        ];

        $response = $this->actingAs($admin, 'sanctum')
            ->jsonApi()
            ->expects('customers')
            ->withData($updateData)
            ->patch("/api/v1/customers/{$customer->id}");

        $response->assertStatus(200);
        $this->assertEquals('Cliente Actualizado', $response->json('data.attributes.name'));
    }

    public function test_cannot_update_customer_with_invalid_classification()
    {
        $admin = $this->createUserWithPermissions('admin', ['customers.update']);
        
        $customer = Customer::factory()->create();

        $updateData = [
            'type' => 'customers',
            'id' => (string) $customer->id,
            'attributes' => [
                'classification' => 'tipo_invalido'
            ]
        ];

        $response = $this->actingAs($admin, 'sanctum')
            ->jsonApi()
            ->expects('customers')
            ->withData($updateData)
            ->patch("/api/v1/customers/{$customer->id}");

        $response->assertStatus(422);
        $response->assertJsonValidationErrors(['classification']);
    }

    public function test_cannot_update_customer_with_negative_credit_limit()
    {
        $admin = $this->createUserWithPermissions('admin', ['customers.update']);
        
        $customer = Customer::factory()->create();

        $updateData = [
            'type' => 'customers',
            'id' => (string) $customer->id,
            'attributes' => [
                'credit_limit' => -5000.00
            ]
        ];

        $response = $this->actingAs($admin, 'sanctum')
            ->jsonApi()
            ->expects('customers')
            ->withData($updateData)
            ->patch("/api/v1/customers/{$customer->id}");

        $response->assertStatus(422);
        $response->assertJsonValidationErrors(['credit_limit']);
    }

    public function test_cannot_update_customer_with_invalid_email()
    {
        $admin = $this->createUserWithPermissions('admin', ['customers.update']);
        
        $customer = Customer::factory()->create();

        $updateData = [
            'type' => 'customers',
            'id' => (string) $customer->id,
            'attributes' => [
                'email' => 'email-invalido'
            ]
        ];

        $response = $this->actingAs($admin, 'sanctum')
            ->jsonApi()
            ->expects('customers')
            ->withData($updateData)
            ->patch("/api/v1/customers/{$customer->id}");

        $response->assertStatus(422);
        $response->assertJsonValidationErrors(['email']);
    }

    public function test_tech_user_can_update_customer_with_permission()
    {
        $tech = $this->createUserWithPermissions('tech', ['customers.update']);
        
        $customer = Customer::factory()->create(['name' => 'Original']);

        $updateData = [
            'type' => 'customers',
            'id' => (string) $customer->id,
            'attributes' => [
                'name' => 'Actualizado por Tech'
            ]
        ];

        $response = $this->actingAs($tech, 'sanctum')
            ->jsonApi()
            ->expects('customers')
            ->withData($updateData)
            ->patch("/api/v1/customers/{$customer->id}");

        $response->assertStatus(200);
        $this->assertEquals('Actualizado por Tech', $response->json('data.attributes.name'));
    }

    public function test_user_without_permission_cannot_update_customer()
    {
        $user = $this->createUserWithPermissions('customer', []);
        
        $customer = Customer::factory()->create();

        $updateData = [
            'type' => 'customers',
            'id' => (string) $customer->id,
            'attributes' => [
                'name' => 'Intento de actualización'
            ]
        ];

        $response = $this->actingAs($user, 'sanctum')
            ->jsonApi()
            ->expects('customers')
            ->withData($updateData)
            ->patch("/api/v1/customers/{$customer->id}");

        $response->assertStatus(403);
    }

    public function test_guest_cannot_update_customer()
    {
        $customer = Customer::factory()->create();

        $updateData = [
            'type' => 'customers',
            'id' => (string) $customer->id,
            'attributes' => [
                'name' => 'Intento guest'
            ]
        ];

        $response = $this->jsonApi()
            ->expects('customers')
            ->withData($updateData)
            ->patch("/api/v1/customers/{$customer->id}");

        $response->assertStatus(401);
    }

    public function test_cannot_update_nonexistent_customer()
    {
        $admin = $this->createUserWithPermissions('admin', ['customers.update']);

        $updateData = [
            'type' => 'customers',
            'id' => '999999',
            'attributes' => [
                'name' => 'No existe'
            ]
        ];

        $response = $this->actingAs($admin, 'sanctum')
            ->jsonApi()
            ->expects('customers')
            ->withData($updateData)
            ->patch('/api/v1/customers/999999');

        $response->assertStatus(404);
    }
}
